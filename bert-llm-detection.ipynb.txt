{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":61542,"databundleVersionId":6888007,"sourceType":"competition"},{"sourceId":6977472,"sourceType":"datasetVersion","datasetId":4005256},{"sourceId":2628,"sourceType":"modelInstanceVersion","modelInstanceId":1902},{"sourceId":2938,"sourceType":"modelInstanceVersion","modelInstanceId":2180}],"dockerImageVersionId":30627,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install -q transformers nltk tensorflow tensorflow-hub tensorflow_text","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-01-15T12:08:42.897619Z","iopub.execute_input":"2024-01-15T12:08:42.898458Z","iopub.status.idle":"2024-01-15T12:09:16.039276Z","shell.execute_reply.started":"2024-01-15T12:08:42.898423Z","shell.execute_reply":"2024-01-15T12:09:16.037750Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"## Import libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:16.041779Z","iopub.execute_input":"2024-01-15T12:09:16.042207Z","iopub.status.idle":"2024-01-15T12:09:16.926587Z","shell.execute_reply.started":"2024-01-15T12:09:16.042163Z","shell.execute_reply":"2024-01-15T12:09:16.925772Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n","output_type":"stream"}]},{"cell_type":"code","source":"train_prompt_file = \"/kaggle/input/llm-detect-ai-generated-text/train_prompts.csv\"\ndf_train_prompt = pd.read_csv(train_prompt_file)\n\ntrain_essay_file = \"/kaggle/input/llm-detect-ai-generated-text/train_essays.csv\"\ndf_train_essay = pd.read_csv(train_essay_file)\n\ntest_essay_file = \"/kaggle/input/llm-detect-ai-generated-text/test_essays.csv\"\ndf_test_essay = pd.read_csv(test_essay_file)\n\nsub_file = \"/kaggle/input/llm-detect-ai-generated-text/sample_submission.csv\"\ndf_sub = pd.read_csv(sub_file)","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:16.927637Z","iopub.execute_input":"2024-01-15T12:09:16.928029Z","iopub.status.idle":"2024-01-15T12:09:17.049497Z","shell.execute_reply.started":"2024-01-15T12:09:16.928002Z","shell.execute_reply":"2024-01-15T12:09:17.048702Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df_train_essay.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.051618Z","iopub.execute_input":"2024-01-15T12:09:17.051915Z","iopub.status.idle":"2024-01-15T12:09:17.071858Z","shell.execute_reply.started":"2024-01-15T12:09:17.051889Z","shell.execute_reply":"2024-01-15T12:09:17.070845Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"         id  prompt_id                                               text  \\\n0  0059830c          0  Cars. Cars have been around since they became ...   \n1  005db917          0  Transportation is a large necessity in most co...   \n2  008f63e3          0  \"America's love affair with it's vehicles seem...   \n3  00940276          0  How often do you ride in a car? Do you drive a...   \n4  00c39458          0  Cars are a wonderful thing. They are perhaps o...   \n\n   generated  \n0          0  \n1          0  \n2          0  \n3          0  \n4          0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt_id</th>\n      <th>text</th>\n      <th>generated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0059830c</td>\n      <td>0</td>\n      <td>Cars. Cars have been around since they became ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>005db917</td>\n      <td>0</td>\n      <td>Transportation is a large necessity in most co...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>008f63e3</td>\n      <td>0</td>\n      <td>\"America's love affair with it's vehicles seem...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>00940276</td>\n      <td>0</td>\n      <td>How often do you ride in a car? Do you drive a...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>00c39458</td>\n      <td>0</td>\n      <td>Cars are a wonderful thing. They are perhaps o...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train_prompt.head()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.073184Z","iopub.execute_input":"2024-01-15T12:09:17.073862Z","iopub.status.idle":"2024-01-15T12:09:17.084099Z","shell.execute_reply.started":"2024-01-15T12:09:17.073810Z","shell.execute_reply":"2024-01-15T12:09:17.083108Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   prompt_id                       prompt_name  \\\n0          0                   Car-free cities   \n1          1  Does the electoral college work?   \n\n                                        instructions  \\\n0  Write an explanatory essay to inform fellow ci...   \n1  Write a letter to your state senator in which ...   \n\n                                         source_text  \n0  # In German Suburb, Life Goes On Without Cars ...  \n1  # What Is the Electoral College? by the Office...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prompt_id</th>\n      <th>prompt_name</th>\n      <th>instructions</th>\n      <th>source_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Car-free cities</td>\n      <td>Write an explanatory essay to inform fellow ci...</td>\n      <td># In German Suburb, Life Goes On Without Cars ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Does the electoral college work?</td>\n      <td>Write a letter to your state senator in which ...</td>\n      <td># What Is the Electoral College? by the Office...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train_essay.info()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.085544Z","iopub.execute_input":"2024-01-15T12:09:17.086047Z","iopub.status.idle":"2024-01-15T12:09:17.112087Z","shell.execute_reply.started":"2024-01-15T12:09:17.086018Z","shell.execute_reply":"2024-01-15T12:09:17.111245Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1378 entries, 0 to 1377\nData columns (total 4 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   id         1378 non-null   object\n 1   prompt_id  1378 non-null   int64 \n 2   text       1378 non-null   object\n 3   generated  1378 non-null   int64 \ndtypes: int64(2), object(2)\nmemory usage: 43.2+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train_essay[\"generated\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.113371Z","iopub.execute_input":"2024-01-15T12:09:17.113735Z","iopub.status.idle":"2024-01-15T12:09:17.123551Z","shell.execute_reply.started":"2024-01-15T12:09:17.113708Z","shell.execute_reply":"2024-01-15T12:09:17.122668Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"generated\n0    1375\n1       3\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x=df_train_essay['generated'])\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.124950Z","iopub.execute_input":"2024-01-15T12:09:17.125306Z","iopub.status.idle":"2024-01-15T12:09:17.380366Z","shell.execute_reply.started":"2024-01-15T12:09:17.125273Z","shell.execute_reply":"2024-01-15T12:09:17.379536Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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bR87dqxWr179vRcFAADQl7oVRB6PRwkJCSdtHzZsmD755JPvvSgAAIC+1K0gSkxM1LZt207avm3bNrlcru+9KAAAgL7UrXuI5s2bpwULFqijo0MTJ06UJJWVlemOO+7gm6oBAEC/060gysvL0+eff67f/e53am9vlyRFRkZq4cKFys/P79EFAgAA9LZuBZHNZtPDDz+sRYsWaf/+/YqKitK5556riIiInl4fAABAr+tWEJ0waNAgXXTRRT21FgAAgIDo1k3VAAAAPyQEEQAAMB5BBAAAjEcQAQAA4xFEAADAeAQRAAAwXtAH0ccff6xf/epXGjJkiKKiopSUlKSdO3da4z6fTwUFBUpISFBUVJTS0tJ08OBBv300NjYqIyNDMTExio2NVVZWllpaWvr6VAAAQJAK6iA6evSoLr30Ug0YMEB//etf9c477+iRRx7RGWecYc1ZvHixioqKtHr1alVVVSk6Olrp6ek6duyYNScjI0P79u1TaWmpNm3apIqKCs2fPz8QpwQAAIKQzefz+QK9iH/mzjvv1LZt27R169ZTjvt8PrlcLt122226/fbbJUnNzc1yOBxav369Zs+erf3792vMmDHasWOHUlJSJEklJSWaNm2a/u///u+Uv4y2ra1NbW1t1nOv16vExEQ1NzcrJiamF87075Lznuq1fQP9WfWSuYFeAoB+yOv1ym63n9bP76C+QvTSSy8pJSVFV199teLj43XBBRfoySeftMYPHTokj8ejtLQ0a5vdbldqaqoqKyslSZWVlYqNjbViSJLS0tIUEhKiqqqqUx63sLBQdrvdeiQmJvbSGQIAgGAQ1EH0wQcf6IknntC5556rV199VTfeeKNuvvlmbdiwQZLk8XgkSQ6Hw+91DofDGvN4PIqPj/cbDwsLU1xcnDXn6/Lz89Xc3Gw96urqevrUAABAEPlev8ust3V1dSklJUUPPfSQJOmCCy7Q3r17tXr1amVmZvbacSMiIvhFtQAAGCSorxAlJCRozJgxfttGjx6tw4cPS5KcTqckqb6+3m9OfX29NeZ0OtXQ0OA3fvz4cTU2NlpzAACA2YI6iC699FLV1tb6bTtw4IDOPvtsSdLIkSPldDpVVlZmjXu9XlVVVcntdkuS3G63mpqaVF1dbc3ZsmWLurq6lJqa2gdnAQAAgl1Qv2V266236mc/+5keeughXXPN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SXv37tXUqVM1aNAgORwOzZkzR5999pn12tbWVs2dO1eDBg1SQkKCHnnkkZ7/ywXwnRBEAAImNzdX27Zt00svvaTS0lJt3bpVu3btssZzcnJUWVmpZ555Rrt379bVV1+tKVOm6ODBg9acL7/8UkuXLtV//ud/qqKiQocPH9btt99ujRcXF6ugoEAPPvig9u/fr4ceekiLFi3Shg0b/NZy55136pZbbtH+/fuVnp6uY8eOKTk5Wa+88or27t2r+fPna86cOdq+fbskacWKFXK73Zo3b54++eQTffLJJ0pMTFRTU5MmTpyoCy64QDt37lRJSYnq6+t1zTXXWMfKy8tTeXm5XnzxRW3evFmvv/6633kDCAAfAASA1+v1DRgwwPf8889b25qamnwDBw703XLLLb6PPvrIFxoa6vv444/9Xjdp0iRffn6+z+fz+datW+eT5Hvvvfes8VWrVvkcDof1/JxzzvE9/fTTfvu4//77fW632+fz+XyHDh3ySfItX778W9c8ffp032233WY9v+KKK3y33HLLSfuePHmy37a6ujqfJF9tba3viy++8IWHh/uee+45a/zzzz/3RUVFnbQvAH0nLMA9BsBQH3zwgTo6OnTxxRdb2+x2u0aNGiVJ2rNnjzo7O/XjH//Y73VtbW0aMmSI9XzgwIE655xzrOcJCQlqaGiQ9Pe3pt5//31lZWVp3rx51pzjx4/Lbrf77TclJcXveWdnpx566CE999xz+vjjj9Xe3q62tjYNHDjwG8/r7bff1muvvaZBgwadNPb+++/rb3/7m9rb25Wammptj4uLs84bQGAQRACCUktLi0JDQ1VdXa3Q0FC/sa/GxoABA/zGbDabfD6ftQ9JevLJJ/0CRNJJ+4yOjvZ7vmTJEq1YsULLly9XUlKSoqOjtWDBArW3t3/rumfMmKGHH374pLGEhAS999573/h6AIFBEAEIiB/96EcaMGCAduzYoeHDh0uSmpubdeDAAY0fP14XXHCBOjs71dDQoMsvv7xbx3A4HHK5XPrggw+UkZHxnV67bds2XXXVVfrVr34lSerq6tKBAwc0ZswYa054eLg6Ozv9XnfhhRfqz3/+s0aMGKGwsJP/iz3nnHM0YMAAVVVVWed99OhRHThwQFdcccV3PUUAPYSbqgEExODBg5WZmam8vDy99tpr2rdvn7KyshQSEiKbzaYf//jHysjI0Ny5c/WXv/xFhw4d0vbt21VYWKhXXnnltI9z7733qrCwUEVFRTpw4ID27NmjdevWadmyZd/4unPPPVelpaV64403tH//fv3mN79RfX2935wRI0aoqqpKH374oT777DN1dXUpOztbjY2Nuvbaa7Vjxw69//77evXVV3XDDTeos7NTgwYNUlZWlvLy8rRlyxbt3btX119/vUJC+O8YCCT+BQIImGXLlsntduvnP/+50tLSdOmll1ofj5ekdevWae7cubrttts0atQozZw50++K0un493//d/3xj3/UunXrlJSUpCuuuELr16/XyJEjv/F1d911ly688EKlp6drwoQJcjqdmjlzpt+c22+/XaGhoRozZoyGDRumw4cPy+Vyadu2bers7NTkyZOVlJSkBQsWKDY21oqeJUuW6PLLL9eMGTOUlpamyy67TMnJyd/tLw9Aj7L5TrzZDgAB1traqjPPPFOPPPKIsrKyAr0cAAbhHiIAAfPWW2/p3Xff1cUXX6zm5mbdd999kqSrrroqwCsDYBqCCEBALV26VLW1tQoPD1dycrK2bt2qoUOHBnpZAAzDW2YAAMB43FQNAACMRxABAADjEUQAAMB4BBEAADAeQQQAAIxHEAEAAOMRRAAAwHgEEQAAMN7/AwxoIxDXz0EUAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"code","source":"df_train_essay[\"prompt_id\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.381677Z","iopub.execute_input":"2024-01-15T12:09:17.381967Z","iopub.status.idle":"2024-01-15T12:09:17.389248Z","shell.execute_reply.started":"2024-01-15T12:09:17.381941Z","shell.execute_reply":"2024-01-15T12:09:17.388250Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"prompt_id\n0    708\n1    670\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x=df_train_essay['prompt_id'])\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.393942Z","iopub.execute_input":"2024-01-15T12:09:17.394231Z","iopub.status.idle":"2024-01-15T12:09:17.695828Z","shell.execute_reply.started":"2024-01-15T12:09:17.394205Z","shell.execute_reply":"2024-01-15T12:09:17.694866Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Since the generated distrobution are not equal, lets add external dataset","metadata":{}},{"cell_type":"code","source":"train_essay_ex_file = \"/kaggle/input/daigt-v2-train-dataset/train_v2_drcat_02.csv\"\ndf_train_essay_ex = pd.read_csv(train_essay_ex_file)","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:17.696944Z","iopub.execute_input":"2024-01-15T12:09:17.697236Z","iopub.status.idle":"2024-01-15T12:09:19.803120Z","shell.execute_reply.started":"2024-01-15T12:09:17.697211Z","shell.execute_reply":"2024-01-15T12:09:19.802301Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"df_train_essay_ex.rename(columns = {\"label\":\"generated\"}, inplace=True)\ndf_train_essay_ex['generated'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:19.804488Z","iopub.execute_input":"2024-01-15T12:09:19.804806Z","iopub.status.idle":"2024-01-15T12:09:19.813179Z","shell.execute_reply.started":"2024-01-15T12:09:19.804779Z","shell.execute_reply":"2024-01-15T12:09:19.812202Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"generated\n0    27371\n1    17497\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x=df_train_essay_ex['generated'])\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:19.814318Z","iopub.execute_input":"2024-01-15T12:09:19.814631Z","iopub.status.idle":"2024-01-15T12:09:20.033977Z","shell.execute_reply.started":"2024-01-15T12:09:19.814598Z","shell.execute_reply":"2024-01-15T12:09:20.032981Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Merge Dataset","metadata":{}},{"cell_type":"code","source":"df_train = pd.concat([df_train_essay_ex[[\"text\", \"generated\"]],\n                                   df_train_essay[[\"text\", \"generated\"]]])","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.035218Z","iopub.execute_input":"2024-01-15T12:09:20.035508Z","iopub.status.idle":"2024-01-15T12:09:20.048354Z","shell.execute_reply.started":"2024-01-15T12:09:20.035483Z","shell.execute_reply":"2024-01-15T12:09:20.047478Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"df_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.051412Z","iopub.execute_input":"2024-01-15T12:09:20.052416Z","iopub.status.idle":"2024-01-15T12:09:20.069312Z","shell.execute_reply.started":"2024-01-15T12:09:20.052366Z","shell.execute_reply":"2024-01-15T12:09:20.068275Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 46246 entries, 0 to 1377\nData columns (total 2 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   text       46246 non-null  object\n 1   generated  46246 non-null  int64 \ndtypes: int64(1), object(1)\nmemory usage: 1.1+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train['generated'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.070396Z","iopub.execute_input":"2024-01-15T12:09:20.070702Z","iopub.status.idle":"2024-01-15T12:09:20.078801Z","shell.execute_reply.started":"2024-01-15T12:09:20.070666Z","shell.execute_reply":"2024-01-15T12:09:20.077904Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"generated\n0    28746\n1    17500\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x=df_train['generated'])\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.079899Z","iopub.execute_input":"2024-01-15T12:09:20.080151Z","iopub.status.idle":"2024-01-15T12:09:20.308123Z","shell.execute_reply.started":"2024-01-15T12:09:20.080128Z","shell.execute_reply":"2024-01-15T12:09:20.307139Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Balancing Dataset","metadata":{}},{"cell_type":"code","source":"# # Function to balance label counts\n# def undersample(df, label_column='generated'):\n#     label_counts = df[label_column].value_counts()\n#     min_count = label_counts.min()\n\n#     balanced_df = pd.DataFrame()\n\n#     for label, count in label_counts.items():\n#         label_subset = df[df[label_column] == label]\n#         undersampled_subset = label_subset.sample(n=min_count, random_state=42)\n#         balanced_df = pd.concat([balanced_df, undersampled_subset], ignore_index=True)\n\n#     return balanced_df\n\n# # Balance labels in the DataFrame\n# df_balanced_train = undersample(df_train)\n\n# Print the balanced DataFrame\n# print(df_balanced_train)","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.309391Z","iopub.execute_input":"2024-01-15T12:09:20.309717Z","iopub.status.idle":"2024-01-15T12:09:20.314255Z","shell.execute_reply.started":"2024-01-15T12:09:20.309689Z","shell.execute_reply":"2024-01-15T12:09:20.313341Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x=df_train['generated'])\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.315745Z","iopub.execute_input":"2024-01-15T12:09:20.316035Z","iopub.status.idle":"2024-01-15T12:09:20.477142Z","shell.execute_reply.started":"2024-01-15T12:09:20.316009Z","shell.execute_reply":"2024-01-15T12:09:20.476228Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAk0AAAG0CAYAAAAvjxMUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8WgzjOAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAvA0lEQVR4nO3df1RV9Z7/8Reg/PDHwZ+AJKZppRT5AxXPrayUJRo1WU5XzVFS0tGLToqpMV/DrG5MmqWl6XSdpGbppN57tZsUykXFUtTCzB+ppdFgNw9aCkdJAWF//2jYy5NWHwk9B3s+1tpruffnvT/7vc9aeF5rn3328bMsyxIAAAB+lr+3GwAAAKgPCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGCE0AAAAGvBqaFi9erNtuu00Oh0MOh0NOp1Pvv/++PX7u3DmlpKSoZcuWatKkiYYMGaLi4mKPOYqKipSYmKhGjRopLCxM06ZN0/nz5z1qNm/erB49eigoKEidOnVSZmbmRb0sWrRI7du3V3BwsOLi4rRz584rcs4AAKB+auDNg7dt21b/8R//oRtvvFGWZenNN9/UAw88oE8++US33HKLpkyZoqysLK1evVqhoaGaOHGiHnroIW3dulWSVFVVpcTEREVERGjbtm06duyYRo0apYYNG+r555+XJBUWFioxMVHjx4/X8uXLlZubq8cee0xt2rRRQkKCJGnlypVKTU3VkiVLFBcXp/nz5yshIUGHDh1SWFiY0blUV1frm2++UdOmTeXn53dlXjAAAFCnLMvS6dOnFRkZKX//X7iWZPmY5s2bW0uXLrVKSkqshg0bWqtXr7bHDhw4YEmy8vPzLcuyrPfee8/y9/e3XC6XXbN48WLL4XBY5eXllmVZ1vTp061bbrnF4xhDhw61EhIS7PXevXtbKSkp9npVVZUVGRlpZWRkGPd99OhRSxILCwsLCwtLPVyOHj36i+/1Xr3SdKGqqiqtXr1aZWVlcjqdKigoUGVlpeLj4+2azp07q127dsrPz1efPn2Un5+vmJgYhYeH2zUJCQmaMGGC9u/fr+7duys/P99jjpqayZMnS5IqKipUUFCgtLQ0e9zf31/x8fHKz8//yX7Ly8tVXl5ur1uWJUk6evSoHA7Hr3otAADA1eF2uxUVFaWmTZv+Yq3XQ9PevXvldDp17tw5NWnSRGvWrFF0dLR2796twMBANWvWzKM+PDxcLpdLkuRyuTwCU814zdjP1bjdbp09e1anTp1SVVXVJWsOHjz4k31nZGRo9uzZF22vuT8LAADUHya31nj923M333yzdu/erR07dmjChAlKSkrSZ5995u22flFaWppKS0vt5ejRo95uCQAAXEFev9IUGBioTp06SZJiY2P10UcfacGCBRo6dKgqKipUUlLicbWpuLhYERERkqSIiIiLvuVW8+26C2t+/I274uJiORwOhYSEKCAgQAEBAZesqZnjUoKCghQUFFS7kwYAAPWO1680/Vh1dbXKy8sVGxurhg0bKjc31x47dOiQioqK5HQ6JUlOp1N79+7V8ePH7ZqcnBw5HA5FR0fbNRfOUVNTM0dgYKBiY2M9aqqrq5Wbm2vXAAAAePVKU1pamgYNGqR27drp9OnTWrFihTZv3qz169crNDRUycnJSk1NVYsWLeRwODRp0iQ5nU716dNHkjRgwABFR0dr5MiRmjNnjlwul2bOnKmUlBT7KtD48eO1cOFCTZ8+XWPGjNHGjRu1atUqZWVl2X2kpqYqKSlJPXv2VO/evTV//nyVlZVp9OjRXnldAACADzL+Tv0VMGbMGOv666+3AgMDrdatW1v9+/e3NmzYYI+fPXvW+sMf/mA1b97catSokfXggw9ax44d85jjq6++sgYNGmSFhIRYrVq1sqZOnWpVVlZ61GzatMnq1q2bFRgYaN1www3WsmXLLurl1Vdftdq1a2cFBgZavXv3trZv335Z51JaWmpJskpLSy9rPwAA4D2X8/7tZ1n/9115/Cput1uhoaEqLS3l23MAANQTl/P+7XP3NAEAAPgiQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABr/72HC5f7LS3vN0C4HMK5o7ydgsAfgO40gQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGCA0AQAAGDAq6EpIyNDvXr1UtOmTRUWFqbBgwfr0KFDHjV33323/Pz8PJbx48d71BQVFSkxMVGNGjVSWFiYpk2bpvPnz3vUbN68WT169FBQUJA6deqkzMzMi/pZtGiR2rdvr+DgYMXFxWnnzp11fs4AAKB+8mpoysvLU0pKirZv366cnBxVVlZqwIABKisr86gbO3asjh07Zi9z5syxx6qqqpSYmKiKigpt27ZNb775pjIzM5Wenm7XFBYWKjExUffcc492796tyZMn67HHHtP69evtmpUrVyo1NVWzZs3Srl271LVrVyUkJOj48eNX/oUAAAA+z8+yLMvbTdQ4ceKEwsLClJeXp759+0r64UpTt27dNH/+/Evu8/777+u+++7TN998o/DwcEnSkiVLNGPGDJ04cUKBgYGaMWOGsrKytG/fPnu/YcOGqaSkRNnZ2ZKkuLg49erVSwsXLpQkVVdXKyoqSpMmTdKTTz75i7273W6FhoaqtLRUDofj17wMPyt22ltXbG6gviqYO8rbLQCopy7n/dun7mkqLS2VJLVo0cJj+/Lly9WqVSvdeuutSktL0/fff2+P5efnKyYmxg5MkpSQkCC32639+/fbNfHx8R5zJiQkKD8/X5JUUVGhgoICjxp/f3/Fx8fbNQAA4LetgbcbqFFdXa3Jkyfr9ttv16233mpvf+SRR3T99dcrMjJSe/bs0YwZM3To0CH99a9/lSS5XC6PwCTJXne5XD9b43a7dfbsWZ06dUpVVVWXrDl48OAl+y0vL1d5ebm97na7a3nmAACgPvCZ0JSSkqJ9+/bpww8/9Ng+btw4+98xMTFq06aN+vfvryNHjqhjx45Xu01bRkaGZs+e7bXjAwCAq8snPp6bOHGi1q1bp02bNqlt27Y/WxsXFydJOnz4sCQpIiJCxcXFHjU16xERET9b43A4FBISolatWikgIOCSNTVz/FhaWppKS0vt5ejRo4ZnCwAA6iOvhibLsjRx4kStWbNGGzduVIcOHX5xn927d0uS2rRpI0lyOp3au3evx7fccnJy5HA4FB0dbdfk5uZ6zJOTkyOn0ylJCgwMVGxsrEdNdXW1cnNz7ZofCwoKksPh8FgAAMC1y6sfz6WkpGjFihV655131LRpU/sepNDQUIWEhOjIkSNasWKF7r33XrVs2VJ79uzRlClT1LdvX912222SpAEDBig6OlojR47UnDlz5HK5NHPmTKWkpCgoKEiSNH78eC1cuFDTp0/XmDFjtHHjRq1atUpZWVl2L6mpqUpKSlLPnj3Vu3dvzZ8/X2VlZRo9evTVf2EAAIDP8WpoWrx4saQfHitwoWXLlunRRx9VYGCg/v73v9sBJioqSkOGDNHMmTPt2oCAAK1bt04TJkyQ0+lU48aNlZSUpGeeecau6dChg7KysjRlyhQtWLBAbdu21dKlS5WQkGDXDB06VCdOnFB6erpcLpe6deum7Ozsi24OBwAAv00+9Zym+oznNAHew3OaANRWvX1OEwAAgK8iNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABggNAEAABjwamjKyMhQr1691LRpU4WFhWnw4ME6dOiQR825c+eUkpKili1bqkmTJhoyZIiKi4s9aoqKipSYmKhGjRopLCxM06ZN0/nz5z1qNm/erB49eigoKEidOnVSZmbmRf0sWrRI7du3V3BwsOLi4rRz5846P2cAAFA/eTU05eXlKSUlRdu3b1dOTo4qKys1YMAAlZWV2TVTpkzRu+++q9WrVysvL0/ffPONHnroIXu8qqpKiYmJqqio0LZt2/Tmm28qMzNT6enpdk1hYaESExN1zz33aPfu3Zo8ebIee+wxrV+/3q5ZuXKlUlNTNWvWLO3atUtdu3ZVQkKCjh8/fnVeDAAA4NP8LMuyvN1EjRMnTigsLEx5eXnq27evSktL1bp1a61YsUL//M//LEk6ePCgunTpovz8fPXp00fvv/++7rvvPn3zzTcKDw+XJC1ZskQzZszQiRMnFBgYqBkzZigrK0v79u2zjzVs2DCVlJQoOztbkhQXF6devXpp4cKFkqTq6mpFRUVp0qRJevLJJ3+xd7fbrdDQUJWWlsrhcNT1S2OLnfbWFZsbqK8K5o7ydgsA6qnLef/2qXuaSktLJUktWrSQJBUUFKiyslLx8fF2TefOndWuXTvl5+dLkvLz8xUTE2MHJklKSEiQ2+3W/v377ZoL56ipqZmjoqJCBQUFHjX+/v6Kj4+3awAAwG9bA283UKO6ulqTJ0/W7bffrltvvVWS5HK5FBgYqGbNmnnUhoeHy+Vy2TUXBqaa8Zqxn6txu906e/asTp06paqqqkvWHDx48JL9lpeXq7y83F53u92XecYAAKA+8ZkrTSkpKdq3b5/efvttb7diJCMjQ6GhofYSFRXl7ZYAAMAV5BOhaeLEiVq3bp02bdqktm3b2tsjIiJUUVGhkpISj/ri4mJFRETYNT/+Nl3N+i/VOBwOhYSEqFWrVgoICLhkTc0cP5aWlqbS0lJ7OXr06OWfOAAAqDe8Gposy9LEiRO1Zs0abdy4UR06dPAYj42NVcOGDZWbm2tvO3TokIqKiuR0OiVJTqdTe/fu9fiWW05OjhwOh6Kjo+2aC+eoqamZIzAwULGxsR411dXVys3NtWt+LCgoSA6Hw2MBAADXLq/e05SSkqIVK1bonXfeUdOmTe17kEJDQxUSEqLQ0FAlJycrNTVVLVq0kMPh0KRJk+R0OtWnTx9J0oABAxQdHa2RI0dqzpw5crlcmjlzplJSUhQUFCRJGj9+vBYuXKjp06drzJgx2rhxo1atWqWsrCy7l9TUVCUlJalnz57q3bu35s+fr7KyMo0ePfrqvzAAAMDneDU0LV68WJJ09913e2xftmyZHn30UUnSyy+/LH9/fw0ZMkTl5eVKSEjQa6+9ZtcGBARo3bp1mjBhgpxOpxo3bqykpCQ988wzdk2HDh2UlZWlKVOmaMGCBWrbtq2WLl2qhIQEu2bo0KE6ceKE0tPT5XK51K1bN2VnZ190czgAAPht8qnnNNVnPKcJ8B6e0wSgturtc5oAAAB8FaEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAAKEJAADAQANvNwAA+EHRMzHebgHwOe3S93q7BRtXmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAwQmgAAAAzUKjT169dPJSUlF213u93q16/fr+0JAADA59QqNG3evFkVFRUXbT937pw++OCDX90UAACAr2lwOcV79uyx//3ZZ5/J5XLZ61VVVcrOztZ1111Xd90BAAD4iMsKTd26dZOfn5/8/Pwu+TFcSEiIXn311TprDgAAwFdcVmgqLCyUZVm64YYbtHPnTrVu3doeCwwMVFhYmAICAuq8SQAAAG+7rNB0/fXXS5Kqq6uvSDMAAAC+6rJC04W++OILbdq0ScePH78oRKWnp//qxgAAAHxJrULTn/70J02YMEGtWrVSRESE/Pz87DE/Pz9CEwAAuObUKjQ999xz+uMf/6gZM2bUdT8AAAA+qVbPaTp16pQefvjhuu4FAADAZ9UqND388MPasGFDXfcCAADgs2r18VynTp301FNPafv27YqJiVHDhg09xv/t3/6tTpoDAADwFbUKTa+//rqaNGmivLw85eXleYz5+fkRmgAAwDWnVqGpsLCwrvsAAADwabW6p6mubNmyRffff78iIyPl5+entWvXeow/+uij9s+21CwDBw70qDl58qRGjBghh8OhZs2aKTk5WWfOnPGo2bNnj+68804FBwcrKipKc+bMuaiX1atXq3PnzgoODlZMTIzee++9Oj9fAABQf9XqStOYMWN+dvyNN94wmqesrExdu3bVmDFj9NBDD12yZuDAgVq2bJm9HhQU5DE+YsQIHTt2TDk5OaqsrNTo0aM1btw4rVixQpLkdrs1YMAAxcfHa8mSJdq7d6/GjBmjZs2aady4cZKkbdu2afjw4crIyNB9992nFStWaPDgwdq1a5duvfVWo3MBAADXtlqFplOnTnmsV1ZWat++fSopKbnkD/n+lEGDBmnQoEE/WxMUFKSIiIhLjh04cEDZ2dn66KOP1LNnT0nSq6++qnvvvVcvvviiIiMjtXz5clVUVOiNN95QYGCgbrnlFu3evVsvvfSSHZoWLFiggQMHatq0aZKkZ599Vjk5OVq4cKGWLFlifD4AAODaVavQtGbNmou2VVdXa8KECerYseOvbupCmzdvVlhYmJo3b65+/frpueeeU8uWLSVJ+fn5atasmR2YJCk+Pl7+/v7asWOHHnzwQeXn56tv374KDAy0axISEvTCCy/o1KlTat68ufLz85Wamupx3ISEhIs+LrxQeXm5ysvL7XW3211HZwwAAHxRnd3T5O/vr9TUVL388st1NaUGDhyot956S7m5uXrhhReUl5enQYMGqaqqSpLkcrkUFhbmsU+DBg3UokULuVwuuyY8PNyjpmb9l2pqxi8lIyNDoaGh9hIVFfXrThYAAPi0Wv9g76UcOXJE58+fr7P5hg0bZv87JiZGt912mzp27KjNmzerf//+dXac2khLS/O4OuV2uwlOAABcw2oVmn78UZZlWTp27JiysrKUlJRUJ41dyg033KBWrVrp8OHD6t+/vyIiInT8+HGPmvPnz+vkyZP2fVAREREqLi72qKlZ/6Wan7qXSvrhXqsf35QOAACuXbX6eO6TTz7xWPbs2SNJmjdvnubPn1+X/Xn4+uuv9d1336lNmzaSJKfTqZKSEhUUFNg1GzduVHV1teLi4uyaLVu2qLKy0q7JycnRzTffrObNm9s1ubm5HsfKycmR0+m8YucCAADql1pdadq0aVOdHPzMmTM6fPiwvV5YWKjdu3erRYsWatGihWbPnq0hQ4YoIiJCR44c0fTp09WpUyclJCRIkrp06aKBAwdq7NixWrJkiSorKzVx4kQNGzZMkZGRkqRHHnlEs2fPVnJysmbMmKF9+/ZpwYIFHvdePf7447rrrrs0b948JSYm6u2339bHH3+s119/vU7OEwAA1H+/6kbwEydO6MMPP9SHH36oEydOXPb+H3/8sbp3767u3btL+uFjv+7duys9PV0BAQHas2eP/umf/kk33XSTkpOTFRsbqw8++MDjY7Hly5erc+fO6t+/v+69917dcccdHmEnNDRUGzZsUGFhoWJjYzV16lSlp6fbjxuQpN/97ndasWKFXn/9dXXt2lV//vOftXbtWp7RBAAAbH6WZVmXu1NZWZkmTZqkt956S9XV1ZKkgIAAjRo1Sq+++qoaNWpU5436OrfbrdDQUJWWlsrhcFyx48ROe+uKzQ3UVwVzR3m7hTpR9EyMt1sAfE679L1XdP7L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QhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABnw5NTz/9tPz8/DyWzp072+Pnzp1TSkqKWrZsqSZNmmjIkCEqLi72mKOoqEiJiYlq1KiRwsLCNG3aNJ0/f96jZvPmzerRo4eCgoLUqVMnZWZmXo3TAwAA9YhPhyZJuuWWW3Ts2DF7+fDDD+2xKVOm6N1339Xq1auVl5enb775Rg899JA9XlVVpcTERFVUVGjbtm168803lZmZqfT0dLumsLBQiYmJuueee7R7925NnjxZjz32mNavX39VzxMAAPi2Bt5u4Jc0aNBAERERF20vLS3Vf/3Xf2nFihXq16+fJGnZsmXq0qWLtm/frj59+mjDhg367LPP9Pe//13h4eHq1q2bnn32Wc2YMUNPP/20AgMDtWTJEnXo0EHz5s2TJHXp0kUffvihXn75ZSUkJFzVcwUAAL7L5680ffHFF4qMjNQNN9ygESNGqKioSJJUUFCgyspKxcfH27WdO3dWu3btlJ+fL0nKz89XTEyMwsPD7ZqEhAS53W7t37/frrlwjpqamjl+Snl5udxut8cCAACuXT4dmuLi4pSZmans7GwtXrxYhYWFuvPOO3X69Gm5XC4FBgaqWbNmHvuEh4fL5XJJklwul0dgqhmvGfu5GrfbrbNnz/5kbxkZGQoNDbWXqKioX3u6AADAh/n0x3ODBg2y/33bbbcpLi5O119/vVatWqWQkBAvdialpaUpNTXVXne73QQnAACuYT59penHmjVrpptuukmHDx9WRESEKioqVFJS4lFTXFxs3wMVERFx0bfpatZ/qcbhcPxsMAsKCpLD4fBYAADAtatehaYzZ87oyJEjatOmjWJjY9WwYUPl5uba44cOHVJRUZGcTqckyel0au/evTp+/Lhdk5OTI4fDoejoaLvmwjlqamrmAAAAkHw8ND3xxBPKy8vTV199pW3btunBBx9UQECAhg8frtDQUCUnJys1NVWbNm1SQUGBRo8eLafTqT59+kiSBgwYoOjoaI0cOVKffvqp1q9fr5kzZyolJUVBQUGSpPHjx+vLL7/U9OnTdfDgQb322mtatWqVpkyZ4s1TBwAAPsan72n6+uuvNXz4cH333Xdq3bq17rjjDm3fvl2tW7eWJL388svy9/fXkCFDVF5eroSEBL322mv2/gEBAVq3bp0mTJggp9Opxo0bKykpSc8884xd06FDB2VlZWnKlClasGCB2rZtq6VLl/K4AQAA4MHPsizL201cC9xut0JDQ1VaWnpF72+KnfbWFZsbqK8K5o7ydgt1ouiZGG+3APicdul7r+j8l/P+7dMfzwEAAPgKQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQhMAAIABQtOPLFq0SO3bt1dwcLDi4uK0c+dOb7cEAAB8AKHpAitXrlRqaqpmzZqlXbt2qWvXrkpISNDx48e93RoAAPAyQtMFXnrpJY0dO1ajR49WdHS0lixZokaNGumNN97wdmsAAMDLCE3/p6KiQgUFBYqPj7e3+fv7Kz4+Xvn5+V7sDAAA+IIG3m7AV3z77beqqqpSeHi4x/bw8HAdPHjwovry8nKVl5fb66WlpZIkt9t9RfusKj97RecH6qMr/Xd3tZw+V+XtFgCfc6X/vmvmtyzrF2sJTbWUkZGh2bNnX7Q9KirKC90Av22hr473dgsArpSM0KtymNOnTys09OePRWj6P61atVJAQICKi4s9thcXFysiIuKi+rS0NKWmptrr1dXVOnnypFq2bCk/P78r3i+8y+12KyoqSkePHpXD4fB2OwDq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r7zyij7//HPt3btXy5Yt00svvfSz+914443KycnRtm3bdODAAf3rv/6riouLPWrat2+vHTt26KuvvtK3336r6upqpaSk6OTJkxo+fLg++ugjHTlyROvXr9fo0aNVVVWlJk2aKDk5WdOmTdPGjRu1b98+Pfroo/L3579swJv4CwTg01566SU5nU7dd999io+P1+23324/GkCSli1bplGjRmnq1Km6+eabNXjwYI8rUyYee+wxLV26VMuWLVNMTIzuuusuZWZmqkOHDj+738yZM9WjRw8lJCTo7rvvVkREhAYPHuxR88QTTyggIEDR0dFq3bq1ioqKFBkZqa1bt6qqqkoDBgxQTEyMJk+erGbNmtnBaO7cubrzzjt1//33Kz4+XnfccYdiY2Mv78UDUKf8rJoP9gGgHigrK9N1112nefPmKTk52dvtAPgN4Z4mAD7tk08+0cGDB9W7d2+VlpbqmWeekSQ98MADXu4MwG8NoQmAz3vxxRd16NAhBQYGKjY2Vh988IFatWrl7bYA/Mbw8RwAAIABbgQHAAAwQGgCAAAwQGgCAAAwQGgCAAAwQGgCAAAwQGgCAAAwQGgCAAAwQGgCAAAwQGgCAAAw8P8BORFuiX8CkasAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"markdown","source":"## Average Len","metadata":{}},{"cell_type":"code","source":"df_train[\"text_len\"] = df_train[\"text\"].apply(lambda x : len(x.split()))","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:20.478468Z","iopub.execute_input":"2024-01-15T12:09:20.479767Z","iopub.status.idle":"2024-01-15T12:09:21.600803Z","shell.execute_reply.started":"2024-01-15T12:09:20.479731Z","shell.execute_reply":"2024-01-15T12:09:21.600017Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"sns.histplot(df_train['text_len'], bins=20, kde=True)\nplt.title('Histogram of Text Length')\nplt.xlabel('Text Length')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:21.602113Z","iopub.execute_input":"2024-01-15T12:09:21.602416Z","iopub.status.idle":"2024-01-15T12:09:22.228199Z","shell.execute_reply.started":"2024-01-15T12:09:21.602389Z","shell.execute_reply":"2024-01-15T12:09:22.227252Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"print(df_train[\"text_len\"].mean())\nprint(df_train[\"text_len\"].max())","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:22.229412Z","iopub.execute_input":"2024-01-15T12:09:22.229727Z","iopub.status.idle":"2024-01-15T12:09:22.235843Z","shell.execute_reply.started":"2024-01-15T12:09:22.229700Z","shell.execute_reply":"2024-01-15T12:09:22.234928Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"388.76142801539595\n1656\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Since the average seq len is 377. Then, it is enough to use bert with 512 seq len","metadata":{}},{"cell_type":"markdown","source":"## Data pre-process","metadata":{}},{"cell_type":"code","source":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport nltk\n\n# Download the stopwords dataset (you can move this line to the main part of your code if you prefer)\n# nltk.download('stopwords')\n# nltk.download('punkt')\n\ndef remove_stopwords(input_text, language='english'):\n    \"\"\"\n    Remove stopwords from the input text.\n\n    Parameters:\n    - input_text (str): The input text containing stopwords.\n    - language (str): The language of the stopwords. Default is 'english'.\n\n    Returns:\n    - str: The cleaned text without stopwords.\n    \"\"\"\n    # Tokenize the text\n    words = word_tokenize(input_text['text'])\n    \n    print(f\"Index {input_text['index_col']}\") if input_text['index_col'] % 10000 == 0 else None\n\n    # Remove stopwords\n    filtered_words = [word for word in words if word.lower() not in stopwords.words(language)]\n\n    # Join the filtered words to form the cleaned text\n    cleaned_text = ' '.join(filtered_words)\n\n    return cleaned_text","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:22.237193Z","iopub.execute_input":"2024-01-15T12:09:22.237573Z","iopub.status.idle":"2024-01-15T12:09:22.862056Z","shell.execute_reply.started":"2024-01-15T12:09:22.237537Z","shell.execute_reply":"2024-01-15T12:09:22.861189Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# df_balanced_train['index_col'] = df_balanced_train.index\n# df_balanced_train[\"text\"] = df_balanced_train.apply(lambda text: remove_stopwords(text), axis=1)\n\n# df_test_essay['index_col'] = df_test_essay.index\n# df_test_essay[\"text\"] = df_test_essay.apply(lambda text: remove_stopwords(text), axis=1)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-01-15T12:09:22.863186Z","iopub.execute_input":"2024-01-15T12:09:22.863460Z","iopub.status.idle":"2024-01-15T12:09:22.867654Z","shell.execute_reply.started":"2024-01-15T12:09:22.863435Z","shell.execute_reply":"2024-01-15T12:09:22.866685Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"### Split","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nx, y = df_train['text'], df_train['generated']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2529)\n","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:22.868873Z","iopub.execute_input":"2024-01-15T12:09:22.869145Z","iopub.status.idle":"2024-01-15T12:09:22.890718Z","shell.execute_reply.started":"2024-01-15T12:09:22.869120Z","shell.execute_reply":"2024-01-15T12:09:22.889586Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"# Import libraries\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig,BertTokenizer,get_linear_schedule_with_warmup\nimport tensorflow as tf\nimport tensorflow_text as text\nimport tensorflow_hub as hub\n","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:22.892044Z","iopub.execute_input":"2024-01-15T12:09:22.892377Z","iopub.status.idle":"2024-01-15T12:09:39.747557Z","shell.execute_reply.started":"2024-01-15T12:09:22.892351Z","shell.execute_reply":"2024-01-15T12:09:39.746469Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"model_path = \"/kaggle/input/bert/tensorflow2/bert-en-uncased-l-12-h-128-a-2/2\"\npreprocess_path = \"/kaggle/input/bert/tensorflow2/en-uncased-preprocess/3/\"","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:39.748889Z","iopub.execute_input":"2024-01-15T12:09:39.749730Z","iopub.status.idle":"2024-01-15T12:09:39.754357Z","shell.execute_reply.started":"2024-01-15T12:09:39.749699Z","shell.execute_reply":"2024-01-15T12:09:39.753273Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"text_input = tf.keras.layers.Input(shape=(), dtype=tf.string)\npreprocessor = hub.KerasLayer(preprocess_path)\nencoder_inputs = preprocessor(text_input)\nencoder = hub.KerasLayer(\n    model_path,\n    trainable=True)\noutputs = encoder(encoder_inputs)\npooled_output = outputs[\"pooled_output\"]      # [batch_size, 512].\nsequence_output = outputs[\"sequence_output\"]  # [batch_size, seq_length, 512].\ndense_1 = tf.keras.layers.Dense(128 , activation='relu')(pooled_output)\ndropout = tf.keras.layers.Dropout(0.7 , name=\"dropout1\")(pooled_output)\ndense_2 = tf.keras.layers.Dense(64 , activation='relu')(dropout)\ndropout = tf.keras.layers.Dropout(0.5 , name=\"dropout2\")(dense_2)\n\ndense_out = tf.keras.layers.Dense(1 , activation='sigmoid', name='output')(dropout)\n\n\nmodel = tf.keras.Model(inputs=text_input, outputs=dense_out)\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:39.762154Z","iopub.execute_input":"2024-01-15T12:09:39.762597Z","iopub.status.idle":"2024-01-15T12:09:54.663334Z","shell.execute_reply.started":"2024-01-15T12:09:39.762561Z","shell.execute_reply":"2024-01-15T12:09:54.662414Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Model: \"model\"\n__________________________________________________________________________________________________\n Layer (type)                Output Shape                 Param #   Connected to                  \n==================================================================================================\n input_1 (InputLayer)        [(None,)]                    0         []                            \n                                                                                                  \n keras_layer (KerasLayer)    {'input_mask': (None, 128)   0         ['input_1[0][0]']             \n                             , 'input_type_ids': (None,                                           \n                              128),                                                               \n                              'input_word_ids': (None,                                            \n                             128)}                                                                \n                                                                                                  \n keras_layer_1 (KerasLayer)  {'default': (None, 128),     6368641   ['keras_layer[0][0]',         \n                              'encoder_outputs': [(None              'keras_layer[0][1]',         \n                             , 128, 128),                            'keras_layer[0][2]']         \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128),                                                   \n                              (None, 128, 128)],                                                  \n                              'sequence_output': (None,                                           \n                              128, 128),                                                          \n                              'pooled_output': (None, 1                                           \n                             28)}                                                                 \n                                                                                                  \n dropout1 (Dropout)          (None, 128)                  0         ['keras_layer_1[0][13]']      \n                                                                                                  \n dense_1 (Dense)             (None, 64)                   8256      ['dropout1[0][0]']            \n                                                                                                  \n dropout2 (Dropout)          (None, 64)                   0         ['dense_1[0][0]']             \n                                                                                                  \n output (Dense)              (None, 1)                    65        ['dropout2[0][0]']            \n                                                                                                  \n==================================================================================================\nTotal params: 6376962 (24.33 MB)\nTrainable params: 6376961 (24.33 MB)\nNon-trainable params: 1 (1.00 Byte)\n__________________________________________________________________________________________________\n","output_type":"stream"}]},{"cell_type":"code","source":"# https://huggingface.co/google/bert_uncased_L-12_H-128_A-2\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=5e-5),\n              loss='binary_crossentropy',\n              metrics=[\"acc\"])\n\ncheckpoint_filepath = 'checkpoint.hdf5'\nmetric = 'val_accuracy'\ncallback_list = [tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_filepath, \n                                                    monitor=metric,\n                                                    verbose=2,\n                                                    save_best_only=True,\n                                                    mode='max'), \n                 tf.keras.callbacks.EarlyStopping(monitor=metric,\n                                                  patience=0,\n                                                  restore_best_weights=True)\n                ]\nhistory = model.fit(x_train, y_train , batch_size=8, callbacks=[callback_list],\n                    epochs=5 , validation_data=(x_test, y_test))\n# model.load_weights(checkpoint_filepath)\nmodel.save(\"model-bert\")","metadata":{"execution":{"iopub.status.busy":"2024-01-15T12:09:54.664550Z","iopub.execute_input":"2024-01-15T12:09:54.664855Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/5\n1614/4047 [==========>...................] - ETA: 3:21 - loss: 0.3295 - acc: 0.8647","output_type":"stream"}]},{"cell_type":"markdown","source":"# Test","metadata":{}},{"cell_type":"code","source":"loss , acc = model.evaluate(x_train, y_train)\nprint(\"Accuracy on Train data:\",acc)\nloss , acc = model.evaluate(x_test, y_test)\nprint(\"Accuracy on Test data:\",acc)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred = model.predict(df_test_essay['text'])\ny_pred","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_data = {'id': df_test_essay['id'], 'generated': y_pred[:, 0]}\nsubmission = pd.DataFrame(submission_data)\n\n# Save the DataFrame to a CSV file\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.read_csv(\"/kaggle/working/submission.csv\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}